#!/bin/bash

__USER=$USER

# Get super user privileges
if [[ $EUID != 0 ]]; then
	sudo -E "$0" "$@"
	exit $?
fi

THIS_PATH=$PWD
INSTALL_PATH=/tmp/is_install
mkdir -p $INSTALL_PATH && cd $INSTALL_PATH

# If user asked for a specific git url use it 
GIT_URL=${GIT_URL:-https://github.com}
echo "Using ${GIT_URL} ..."

function find::pkg {
	if ! pkg-config --exists $1; then
		echo " [x] $1 not found..."
		return 1
	fi
	echo " [x] $1 found..."
	return 0
}

function find::boost {
	if [ "$(ldconfig -p | grep boost | grep $1)" == "" ]; then
		echo " [x] Boost $1 not found..."
		return 1
	fi 
	echo " [x] Boost $1 found..."
	return 0
}

function find::folder {
	if [ ! -d $1 ]; then
		echo " [x] $(basename $1) not found..."
		return 1
	fi
	echo " [x] $(basename $1) found..."
	return 0
}

function import::git {
	cd $INSTALL_PATH
	if [ ! -d $(basename $1) ]; then
		git clone $1
	fi
	cd $(basename $1)
	git submodule update --init > /dev/null
	echo -n `pwd` 
}

function install::cmake {
	read path
	cd $path
	mkdir -p build
	cd build
	cmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ $@ ..
	make install -j `nproc`
	ldconfig
}

function install::autogen {
	read path
	cd $path
	./autogen.sh
	CC=/usr/bin/clang CXX=/usr/bin/clang++ ./configure $@
	make install -j `nproc`
	ldconfig
}

function install::header_only {
	read path
	cd $path
	cp -r include/* /usr/local/include	
	cp -r bin/* /usr/local/bin	
}

function install::boost {
	wget https://sourceforge.net/projects/boost/files/boost/1.63.0/boost_1_63_0.tar.gz
	tar -xf boost_1_63_0.tar.gz
	rm boost_1_63_0.tar.gz
	cd boost_1_63_0/
	./bootstrap.sh
	./b2 install cxxflags=-std=gnu++0x --with-timer --with-chrono --with-system --with-fiber \
		--with-program_options --with-filesystem --with-thread --with-date_time link=shared
	ldconfig
}

function import::wget::tarxz {
	cd $INSTALL_PATH
	filename=$(basename $1)
	if [ ! -d $filename ]; then
		wget $1
	fi
	tar -xf $filename
	rm $filename
	cd ${filename%.tar.xz}
	echo -n `pwd`
}

apt-get update && apt-get install -y \
	build-essential unzip wget curl cmake clang clang-tidy git pkg-config autoconf libtool \
	libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \
	libssl-dev libpgm-dev libopenblas-dev liblapack-dev liblapacke-dev \
	libvorbis-dev libudev-dev libjpeg-dev libopenal-dev libcurl3-dev libcurlpp-dev

if ! find::boost 1.63; then
	install::boost
fi

if ! find::pkg librabbitmq; then
	import::git ${GIT_URL}/labviros/rabbitmq-c | install::cmake -DCMAKE_INSTALL_LIBDIR=lib 
fi

if ! find::pkg libSimpleAmqpClient; then
	import::git ${GIT_URL}/labviros/SimpleAmqpClient | install::cmake
fi

if ! find::pkg protobuf; then
	import::git ${GIT_URL}/labviros/protobuf | install::autogen 
fi

if ! find::pkg opencv; then
	import::git ${GIT_URL}/labviros/opencv_contrib
	import::git ${GIT_URL}/labviros/opencv | install::cmake \
		-DOPENCV_EXTRA_MODULES_PATH=${INSTALL_PATH}/opencv_contrib/modules \
		-DBUILD_PROTOBUF=OFF -D WITH_TBB=ON -D WITH_OPENMP=ON -D WITH_IPP=ON \
		-D CMAKE_BUILD_TYPE=RELEASE -D BUILD_EXAMPLES=OFF -D WITH_NVCUVID=ON \
		-D WITH_CUDA=ON -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF \
		-D WITH_CSTRIPES=ON -D WITH_OPENCL=ON \
		-D BUILD_opencv_python2=OFF -D BUILD_opencv_dnn=OFF -D BUILD_opencv_dnn_modern=OFF \
		-D BUILD_opencv_dpm=OFF -D BUILD_opencv_face=ON
fi

if ! find::pkg armadillo; then
	import::wget::tarxz https://sourceforge.net/projects/arma/files/armadillo-8.300.3.tar.xz | install::cmake
fi

if ! find::folder /usr/local/include/spdlog; then
	import::git ${GIT_URL}/labviros/spdlog | install::header_only
fi

if ! find::folder /usr/local/include/prometheus; then
	import::git ${GIT_URL}/labviros/prometheus-cpp | install::cmake
fi

if ! find::folder /usr/local/include/opentracing; then
	import::git ${GIT_URL}/labviros/opentracing-cpp | install::cmake
fi

if ! find::folder /usr/local/include/zipkin; then
	import::git ${GIT_URL}/labviros/zipkin-cpp-opentracing | install::cmake
fi

import::git ${GIT_URL}/labviros/is-cpp | install::cmake
import::git ${GIT_URL}/labviros/is-msgs | install::cmake

ldconfig

cd $THIS_PATH
